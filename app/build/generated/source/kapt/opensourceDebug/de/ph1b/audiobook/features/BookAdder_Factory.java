// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.features;

import android.content.Context;
import dagger.internal.Factory;
import de.paulwoitaschek.chapterreader.ChapterReader;
import de.ph1b.audiobook.data.repo.BookRepository;
import de.ph1b.audiobook.misc.MediaAnalyzer;
import de.ph1b.audiobook.persistence.pref.Pref;
import de.ph1b.audiobook.uitools.CoverFromDiscCollector;
import java.util.Set;
import javax.inject.Provider;

public final class BookAdder_Factory implements Factory<BookAdder> {
  private final Provider<Context> contextProvider;

  private final Provider<BookRepository> repoProvider;

  private final Provider<CoverFromDiscCollector> coverCollectorProvider;

  private final Provider<MediaAnalyzer> mediaAnalyzerProvider;

  private final Provider<ChapterReader> chapterReaderProvider;

  private final Provider<Pref<Set<String>>> singleBookFolderPrefProvider;

  private final Provider<Pref<Set<String>>> collectionBookFolderPrefProvider;

  public BookAdder_Factory(
      Provider<Context> contextProvider,
      Provider<BookRepository> repoProvider,
      Provider<CoverFromDiscCollector> coverCollectorProvider,
      Provider<MediaAnalyzer> mediaAnalyzerProvider,
      Provider<ChapterReader> chapterReaderProvider,
      Provider<Pref<Set<String>>> singleBookFolderPrefProvider,
      Provider<Pref<Set<String>>> collectionBookFolderPrefProvider) {
    this.contextProvider = contextProvider;
    this.repoProvider = repoProvider;
    this.coverCollectorProvider = coverCollectorProvider;
    this.mediaAnalyzerProvider = mediaAnalyzerProvider;
    this.chapterReaderProvider = chapterReaderProvider;
    this.singleBookFolderPrefProvider = singleBookFolderPrefProvider;
    this.collectionBookFolderPrefProvider = collectionBookFolderPrefProvider;
  }

  @Override
  public BookAdder get() {
    return provideInstance(
        contextProvider,
        repoProvider,
        coverCollectorProvider,
        mediaAnalyzerProvider,
        chapterReaderProvider,
        singleBookFolderPrefProvider,
        collectionBookFolderPrefProvider);
  }

  public static BookAdder provideInstance(
      Provider<Context> contextProvider,
      Provider<BookRepository> repoProvider,
      Provider<CoverFromDiscCollector> coverCollectorProvider,
      Provider<MediaAnalyzer> mediaAnalyzerProvider,
      Provider<ChapterReader> chapterReaderProvider,
      Provider<Pref<Set<String>>> singleBookFolderPrefProvider,
      Provider<Pref<Set<String>>> collectionBookFolderPrefProvider) {
    return new BookAdder(
        contextProvider.get(),
        repoProvider.get(),
        coverCollectorProvider.get(),
        mediaAnalyzerProvider.get(),
        chapterReaderProvider.get(),
        singleBookFolderPrefProvider.get(),
        collectionBookFolderPrefProvider.get());
  }

  public static BookAdder_Factory create(
      Provider<Context> contextProvider,
      Provider<BookRepository> repoProvider,
      Provider<CoverFromDiscCollector> coverCollectorProvider,
      Provider<MediaAnalyzer> mediaAnalyzerProvider,
      Provider<ChapterReader> chapterReaderProvider,
      Provider<Pref<Set<String>>> singleBookFolderPrefProvider,
      Provider<Pref<Set<String>>> collectionBookFolderPrefProvider) {
    return new BookAdder_Factory(
        contextProvider,
        repoProvider,
        coverCollectorProvider,
        mediaAnalyzerProvider,
        chapterReaderProvider,
        singleBookFolderPrefProvider,
        collectionBookFolderPrefProvider);
  }

  public static BookAdder newBookAdder(
      Context context,
      BookRepository repo,
      CoverFromDiscCollector coverCollector,
      MediaAnalyzer mediaAnalyzer,
      ChapterReader chapterReader,
      Pref<Set<String>> singleBookFolderPref,
      Pref<Set<String>> collectionBookFolderPref) {
    return new BookAdder(
        context,
        repo,
        coverCollector,
        mediaAnalyzer,
        chapterReader,
        singleBookFolderPref,
        collectionBookFolderPref);
  }
}
