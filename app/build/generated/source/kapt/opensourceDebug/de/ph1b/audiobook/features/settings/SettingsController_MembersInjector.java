// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.features.settings;

import dagger.MembersInjector;
import de.ph1b.audiobook.persistence.pref.Pref;
import de.ph1b.audiobook.uitools.ThemeUtil;
import javax.inject.Provider;

public final class SettingsController_MembersInjector
    implements MembersInjector<SettingsController> {
  private final Provider<Pref<ThemeUtil.Theme>> themePrefProvider;

  private final Provider<Pref<Boolean>> resumeOnReplugPrefProvider;

  private final Provider<Pref<Boolean>> resumeAfterCallPrefProvider;

  private final Provider<Pref<Integer>> autoRewindAmountPrefProvider;

  private final Provider<Pref<Integer>> seekTimePrefProvider;

  private final Provider<Pref<Boolean>> crashReportEnabledPrefProvider;

  public SettingsController_MembersInjector(
      Provider<Pref<ThemeUtil.Theme>> themePrefProvider,
      Provider<Pref<Boolean>> resumeOnReplugPrefProvider,
      Provider<Pref<Boolean>> resumeAfterCallPrefProvider,
      Provider<Pref<Integer>> autoRewindAmountPrefProvider,
      Provider<Pref<Integer>> seekTimePrefProvider,
      Provider<Pref<Boolean>> crashReportEnabledPrefProvider) {
    this.themePrefProvider = themePrefProvider;
    this.resumeOnReplugPrefProvider = resumeOnReplugPrefProvider;
    this.resumeAfterCallPrefProvider = resumeAfterCallPrefProvider;
    this.autoRewindAmountPrefProvider = autoRewindAmountPrefProvider;
    this.seekTimePrefProvider = seekTimePrefProvider;
    this.crashReportEnabledPrefProvider = crashReportEnabledPrefProvider;
  }

  public static MembersInjector<SettingsController> create(
      Provider<Pref<ThemeUtil.Theme>> themePrefProvider,
      Provider<Pref<Boolean>> resumeOnReplugPrefProvider,
      Provider<Pref<Boolean>> resumeAfterCallPrefProvider,
      Provider<Pref<Integer>> autoRewindAmountPrefProvider,
      Provider<Pref<Integer>> seekTimePrefProvider,
      Provider<Pref<Boolean>> crashReportEnabledPrefProvider) {
    return new SettingsController_MembersInjector(
        themePrefProvider,
        resumeOnReplugPrefProvider,
        resumeAfterCallPrefProvider,
        autoRewindAmountPrefProvider,
        seekTimePrefProvider,
        crashReportEnabledPrefProvider);
  }

  @Override
  public void injectMembers(SettingsController instance) {
    injectThemePref(instance, themePrefProvider.get());
    injectResumeOnReplugPref(instance, resumeOnReplugPrefProvider.get());
    injectResumeAfterCallPref(instance, resumeAfterCallPrefProvider.get());
    injectAutoRewindAmountPref(instance, autoRewindAmountPrefProvider.get());
    injectSeekTimePref(instance, seekTimePrefProvider.get());
    injectCrashReportEnabledPref(instance, crashReportEnabledPrefProvider.get());
  }

  public static void injectThemePref(SettingsController instance, Pref<ThemeUtil.Theme> themePref) {
    instance.themePref = themePref;
  }

  public static void injectResumeOnReplugPref(
      SettingsController instance, Pref<Boolean> resumeOnReplugPref) {
    instance.resumeOnReplugPref = resumeOnReplugPref;
  }

  public static void injectResumeAfterCallPref(
      SettingsController instance, Pref<Boolean> resumeAfterCallPref) {
    instance.resumeAfterCallPref = resumeAfterCallPref;
  }

  public static void injectAutoRewindAmountPref(
      SettingsController instance, Pref<Integer> autoRewindAmountPref) {
    instance.autoRewindAmountPref = autoRewindAmountPref;
  }

  public static void injectSeekTimePref(SettingsController instance, Pref<Integer> seekTimePref) {
    instance.seekTimePref = seekTimePref;
  }

  public static void injectCrashReportEnabledPref(
      SettingsController instance, Pref<Boolean> crashReportEnabledPref) {
    instance.crashReportEnabledPref = crashReportEnabledPref;
  }
}
