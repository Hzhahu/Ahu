// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.injection;

import android.app.PendingIntent;
import android.content.ComponentName;
import android.support.v4.media.session.MediaSessionCompat;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import de.ph1b.audiobook.playback.MediaSessionCallback;
import de.ph1b.audiobook.playback.PlaybackService;
import javax.inject.Provider;

public final class PlaybackModule_ProvideMediaSessionFactory
    implements Factory<MediaSessionCompat> {
  private final PlaybackModule module;

  private final Provider<PlaybackService> serviceProvider;

  private final Provider<MediaSessionCallback> callbackProvider;

  private final Provider<ComponentName> mbrComponentNameProvider;

  private final Provider<PendingIntent> buttonReceiverPendingIntentProvider;

  public PlaybackModule_ProvideMediaSessionFactory(
      PlaybackModule module,
      Provider<PlaybackService> serviceProvider,
      Provider<MediaSessionCallback> callbackProvider,
      Provider<ComponentName> mbrComponentNameProvider,
      Provider<PendingIntent> buttonReceiverPendingIntentProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
    this.callbackProvider = callbackProvider;
    this.mbrComponentNameProvider = mbrComponentNameProvider;
    this.buttonReceiverPendingIntentProvider = buttonReceiverPendingIntentProvider;
  }

  @Override
  public MediaSessionCompat get() {
    return provideInstance(
        module,
        serviceProvider,
        callbackProvider,
        mbrComponentNameProvider,
        buttonReceiverPendingIntentProvider);
  }

  public static MediaSessionCompat provideInstance(
      PlaybackModule module,
      Provider<PlaybackService> serviceProvider,
      Provider<MediaSessionCallback> callbackProvider,
      Provider<ComponentName> mbrComponentNameProvider,
      Provider<PendingIntent> buttonReceiverPendingIntentProvider) {
    return proxyProvideMediaSession(
        module,
        serviceProvider.get(),
        callbackProvider.get(),
        mbrComponentNameProvider.get(),
        buttonReceiverPendingIntentProvider.get());
  }

  public static PlaybackModule_ProvideMediaSessionFactory create(
      PlaybackModule module,
      Provider<PlaybackService> serviceProvider,
      Provider<MediaSessionCallback> callbackProvider,
      Provider<ComponentName> mbrComponentNameProvider,
      Provider<PendingIntent> buttonReceiverPendingIntentProvider) {
    return new PlaybackModule_ProvideMediaSessionFactory(
        module,
        serviceProvider,
        callbackProvider,
        mbrComponentNameProvider,
        buttonReceiverPendingIntentProvider);
  }

  public static MediaSessionCompat proxyProvideMediaSession(
      PlaybackModule instance,
      PlaybackService service,
      MediaSessionCallback callback,
      ComponentName mbrComponentName,
      PendingIntent buttonReceiverPendingIntent) {
    return Preconditions.checkNotNull(
        instance.provideMediaSession(
            service, callback, mbrComponentName, buttonReceiverPendingIntent),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
