// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.injection;

import android.content.Context;
import android.os.PowerManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AndroidModule_ProvidePowerManagerFactory implements Factory<PowerManager> {
  private final AndroidModule module;

  private final Provider<Context> contextProvider;

  public AndroidModule_ProvidePowerManagerFactory(
      AndroidModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public PowerManager get() {
    return provideInstance(module, contextProvider);
  }

  public static PowerManager provideInstance(
      AndroidModule module, Provider<Context> contextProvider) {
    return proxyProvidePowerManager(module, contextProvider.get());
  }

  public static AndroidModule_ProvidePowerManagerFactory create(
      AndroidModule module, Provider<Context> contextProvider) {
    return new AndroidModule_ProvidePowerManagerFactory(module, contextProvider);
  }

  public static PowerManager proxyProvidePowerManager(AndroidModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.providePowerManager(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
