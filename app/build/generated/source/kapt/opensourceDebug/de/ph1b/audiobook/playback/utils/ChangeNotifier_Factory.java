// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.playback.utils;

import android.content.Context;
import android.support.v4.media.session.MediaSessionCompat;
import dagger.internal.Factory;
import de.ph1b.audiobook.playback.PlayStateManager;
import de.ph1b.audiobook.uitools.ImageHelper;
import javax.inject.Provider;

public final class ChangeNotifier_Factory implements Factory<ChangeNotifier> {
  private final Provider<BookUriConverter> bookUriConverterProvider;

  private final Provider<MediaSessionCompat> mediaSessionProvider;

  private final Provider<ImageHelper> imageHelperProvider;

  private final Provider<Context> contextProvider;

  private final Provider<PlayStateManager> playStateManagerProvider;

  public ChangeNotifier_Factory(
      Provider<BookUriConverter> bookUriConverterProvider,
      Provider<MediaSessionCompat> mediaSessionProvider,
      Provider<ImageHelper> imageHelperProvider,
      Provider<Context> contextProvider,
      Provider<PlayStateManager> playStateManagerProvider) {
    this.bookUriConverterProvider = bookUriConverterProvider;
    this.mediaSessionProvider = mediaSessionProvider;
    this.imageHelperProvider = imageHelperProvider;
    this.contextProvider = contextProvider;
    this.playStateManagerProvider = playStateManagerProvider;
  }

  @Override
  public ChangeNotifier get() {
    return provideInstance(
        bookUriConverterProvider,
        mediaSessionProvider,
        imageHelperProvider,
        contextProvider,
        playStateManagerProvider);
  }

  public static ChangeNotifier provideInstance(
      Provider<BookUriConverter> bookUriConverterProvider,
      Provider<MediaSessionCompat> mediaSessionProvider,
      Provider<ImageHelper> imageHelperProvider,
      Provider<Context> contextProvider,
      Provider<PlayStateManager> playStateManagerProvider) {
    return new ChangeNotifier(
        bookUriConverterProvider.get(),
        mediaSessionProvider.get(),
        imageHelperProvider.get(),
        contextProvider.get(),
        playStateManagerProvider.get());
  }

  public static ChangeNotifier_Factory create(
      Provider<BookUriConverter> bookUriConverterProvider,
      Provider<MediaSessionCompat> mediaSessionProvider,
      Provider<ImageHelper> imageHelperProvider,
      Provider<Context> contextProvider,
      Provider<PlayStateManager> playStateManagerProvider) {
    return new ChangeNotifier_Factory(
        bookUriConverterProvider,
        mediaSessionProvider,
        imageHelperProvider,
        contextProvider,
        playStateManagerProvider);
  }

  public static ChangeNotifier newChangeNotifier(
      BookUriConverter bookUriConverter,
      MediaSessionCompat mediaSession,
      ImageHelper imageHelper,
      Context context,
      PlayStateManager playStateManager) {
    return new ChangeNotifier(
        bookUriConverter, mediaSession, imageHelper, context, playStateManager);
  }
}
