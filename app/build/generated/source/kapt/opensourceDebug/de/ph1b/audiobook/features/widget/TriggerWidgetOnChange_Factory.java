// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.features.widget;

import dagger.internal.Factory;
import de.ph1b.audiobook.data.repo.BookRepository;
import de.ph1b.audiobook.persistence.pref.Pref;
import de.ph1b.audiobook.playback.PlayStateManager;
import java.util.UUID;
import javax.inject.Provider;

public final class TriggerWidgetOnChange_Factory implements Factory<TriggerWidgetOnChange> {
  private final Provider<Pref<UUID>> currentBookIdPrefProvider;

  private final Provider<BookRepository> repoProvider;

  private final Provider<PlayStateManager> playStateManagerProvider;

  private final Provider<WidgetUpdater> widgetUpdaterProvider;

  public TriggerWidgetOnChange_Factory(
      Provider<Pref<UUID>> currentBookIdPrefProvider,
      Provider<BookRepository> repoProvider,
      Provider<PlayStateManager> playStateManagerProvider,
      Provider<WidgetUpdater> widgetUpdaterProvider) {
    this.currentBookIdPrefProvider = currentBookIdPrefProvider;
    this.repoProvider = repoProvider;
    this.playStateManagerProvider = playStateManagerProvider;
    this.widgetUpdaterProvider = widgetUpdaterProvider;
  }

  @Override
  public TriggerWidgetOnChange get() {
    return provideInstance(
        currentBookIdPrefProvider, repoProvider, playStateManagerProvider, widgetUpdaterProvider);
  }

  public static TriggerWidgetOnChange provideInstance(
      Provider<Pref<UUID>> currentBookIdPrefProvider,
      Provider<BookRepository> repoProvider,
      Provider<PlayStateManager> playStateManagerProvider,
      Provider<WidgetUpdater> widgetUpdaterProvider) {
    return new TriggerWidgetOnChange(
        currentBookIdPrefProvider.get(),
        repoProvider.get(),
        playStateManagerProvider.get(),
        widgetUpdaterProvider.get());
  }

  public static TriggerWidgetOnChange_Factory create(
      Provider<Pref<UUID>> currentBookIdPrefProvider,
      Provider<BookRepository> repoProvider,
      Provider<PlayStateManager> playStateManagerProvider,
      Provider<WidgetUpdater> widgetUpdaterProvider) {
    return new TriggerWidgetOnChange_Factory(
        currentBookIdPrefProvider, repoProvider, playStateManagerProvider, widgetUpdaterProvider);
  }

  public static TriggerWidgetOnChange newTriggerWidgetOnChange(
      Pref<UUID> currentBookIdPref,
      BookRepository repo,
      PlayStateManager playStateManager,
      WidgetUpdater widgetUpdater) {
    return new TriggerWidgetOnChange(currentBookIdPref, repo, playStateManager, widgetUpdater);
  }
}
