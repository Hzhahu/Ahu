// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.injection;

import android.app.PendingIntent;
import android.content.ComponentName;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import de.ph1b.audiobook.playback.PlaybackService;
import javax.inject.Provider;

public final class PlaybackModule_ProvideButtonRecieverPendingIntentFactory
    implements Factory<PendingIntent> {
  private final PlaybackModule module;

  private final Provider<PlaybackService> serviceProvider;

  private final Provider<ComponentName> mbrComponentNameProvider;

  public PlaybackModule_ProvideButtonRecieverPendingIntentFactory(
      PlaybackModule module,
      Provider<PlaybackService> serviceProvider,
      Provider<ComponentName> mbrComponentNameProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
    this.mbrComponentNameProvider = mbrComponentNameProvider;
  }

  @Override
  public PendingIntent get() {
    return provideInstance(module, serviceProvider, mbrComponentNameProvider);
  }

  public static PendingIntent provideInstance(
      PlaybackModule module,
      Provider<PlaybackService> serviceProvider,
      Provider<ComponentName> mbrComponentNameProvider) {
    return proxyProvideButtonRecieverPendingIntent(
        module, serviceProvider.get(), mbrComponentNameProvider.get());
  }

  public static PlaybackModule_ProvideButtonRecieverPendingIntentFactory create(
      PlaybackModule module,
      Provider<PlaybackService> serviceProvider,
      Provider<ComponentName> mbrComponentNameProvider) {
    return new PlaybackModule_ProvideButtonRecieverPendingIntentFactory(
        module, serviceProvider, mbrComponentNameProvider);
  }

  public static PendingIntent proxyProvideButtonRecieverPendingIntent(
      PlaybackModule instance, PlaybackService service, ComponentName mbrComponentName) {
    return Preconditions.checkNotNull(
        instance.provideButtonRecieverPendingIntent(service, mbrComponentName),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
