// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.injection;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.Application;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.hardware.SensorManager;
import android.media.AudioManager;
import android.os.PowerManager;
import android.support.v4.media.session.MediaSessionCompat;
import android.telephony.TelephonyManager;
import androidx.fragment.app.Fragment;
import com.f2prateek.rx.preferences2.RxSharedPreferences;
import com.squareup.moshi.Moshi;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import de.paulwoitaschek.chapterreader.ChapterReader;
import de.ph1b.audiobook.covercolorextractor.CoverColorExtractor;
import de.ph1b.audiobook.data.repo.BookRepository;
import de.ph1b.audiobook.data.repo.BookRepository_Factory;
import de.ph1b.audiobook.data.repo.BookmarkRepo;
import de.ph1b.audiobook.data.repo.BookmarkRepo_Factory;
import de.ph1b.audiobook.data.repo.internals.AppDb;
import de.ph1b.audiobook.data.repo.internals.BookStorage_Factory;
import de.ph1b.audiobook.data.repo.internals.Converters;
import de.ph1b.audiobook.data.repo.internals.Converters_MembersInjector;
import de.ph1b.audiobook.data.repo.internals.PersistenceModule;
import de.ph1b.audiobook.data.repo.internals.PersistenceModule_AppDbFactory;
import de.ph1b.audiobook.data.repo.internals.PersistenceModule_BookSettingsDaoFactory;
import de.ph1b.audiobook.data.repo.internals.PersistenceModule_BookmarkDaoFactory;
import de.ph1b.audiobook.data.repo.internals.PersistenceModule_ChapterDaoFactory;
import de.ph1b.audiobook.data.repo.internals.PersistenceModule_MetaDataDaoFactory;
import de.ph1b.audiobook.data.repo.internals.PersistenceModule_MigrationsFactory;
import de.ph1b.audiobook.data.repo.internals.PersistenceModule_RoomDatabaseBuilderFactory;
import de.ph1b.audiobook.features.BaseActivity;
import de.ph1b.audiobook.features.BookAdder;
import de.ph1b.audiobook.features.BookAdder_Factory;
import de.ph1b.audiobook.features.MainActivity;
import de.ph1b.audiobook.features.MainActivity_MembersInjector;
import de.ph1b.audiobook.features.audio.Equalizer;
import de.ph1b.audiobook.features.audio.Equalizer_Factory;
import de.ph1b.audiobook.features.audio.LoudnessDialog;
import de.ph1b.audiobook.features.audio.LoudnessDialog_MembersInjector;
import de.ph1b.audiobook.features.audio.LoudnessGain;
import de.ph1b.audiobook.features.audio.LoudnessGain_Factory;
import de.ph1b.audiobook.features.bookOverview.BookOverviewController;
import de.ph1b.audiobook.features.bookOverview.BookOverviewController_MembersInjector;
import de.ph1b.audiobook.features.bookOverview.BookOverviewViewModel;
import de.ph1b.audiobook.features.bookOverview.EditBookBottomSheet;
import de.ph1b.audiobook.features.bookOverview.EditBookBottomSheet_MembersInjector;
import de.ph1b.audiobook.features.bookOverview.EditBookTitleDialogFragment;
import de.ph1b.audiobook.features.bookOverview.EditBookTitleDialogFragment_MembersInjector;
import de.ph1b.audiobook.features.bookOverview.EditCoverDialogFragment;
import de.ph1b.audiobook.features.bookOverview.EditCoverDialogFragment_MembersInjector;
import de.ph1b.audiobook.features.bookOverview.list.LoadBookCover;
import de.ph1b.audiobook.features.bookOverview.list.LoadBookCover_MembersInjector;
import de.ph1b.audiobook.features.bookPlaying.BookPlayController;
import de.ph1b.audiobook.features.bookPlaying.BookPlayController_MembersInjector;
import de.ph1b.audiobook.features.bookPlaying.BookPlayPresenter;
import de.ph1b.audiobook.features.bookPlaying.BookPlayPresenter_MembersInjector;
import de.ph1b.audiobook.features.bookPlaying.JumpToPositionDialogFragment;
import de.ph1b.audiobook.features.bookPlaying.JumpToPositionDialogFragment_MembersInjector;
import de.ph1b.audiobook.features.bookPlaying.SeekDialogFragment;
import de.ph1b.audiobook.features.bookPlaying.SeekDialogFragment_MembersInjector;
import de.ph1b.audiobook.features.bookPlaying.SleepTimerDialogFragment;
import de.ph1b.audiobook.features.bookPlaying.SleepTimerDialogFragment_MembersInjector;
import de.ph1b.audiobook.features.bookSearch.BookSearchHandler;
import de.ph1b.audiobook.features.bookSearch.BookSearchHandler_Factory;
import de.ph1b.audiobook.features.bookSearch.BookSearchParser;
import de.ph1b.audiobook.features.bookSearch.BookSearchParser_Factory;
import de.ph1b.audiobook.features.bookmarks.BookmarkPresenter;
import de.ph1b.audiobook.features.folderChooser.FolderChooserActivity;
import de.ph1b.audiobook.features.folderChooser.FolderChooserPresenter;
import de.ph1b.audiobook.features.folderChooser.FolderChooserPresenter_MembersInjector;
import de.ph1b.audiobook.features.folderChooser.StorageDirFinder;
import de.ph1b.audiobook.features.folderChooser.StorageDirFinder_Factory;
import de.ph1b.audiobook.features.folderOverview.FolderOverviewPresenter;
import de.ph1b.audiobook.features.folderOverview.FolderOverviewPresenter_MembersInjector;
import de.ph1b.audiobook.features.imagepicker.ImagePickerController;
import de.ph1b.audiobook.features.imagepicker.ImagePickerController_MembersInjector;
import de.ph1b.audiobook.features.settings.SettingsController;
import de.ph1b.audiobook.features.settings.SettingsController_MembersInjector;
import de.ph1b.audiobook.features.settings.dialogs.AutoRewindDialogFragment;
import de.ph1b.audiobook.features.settings.dialogs.AutoRewindDialogFragment_MembersInjector;
import de.ph1b.audiobook.features.settings.dialogs.PlaybackSpeedDialogFragment;
import de.ph1b.audiobook.features.settings.dialogs.PlaybackSpeedDialogFragment_MembersInjector;
import de.ph1b.audiobook.features.settings.dialogs.ThemePickerDialogFragment;
import de.ph1b.audiobook.features.settings.dialogs.ThemePickerDialogFragment_MembersInjector;
import de.ph1b.audiobook.features.widget.BaseWidgetProvider;
import de.ph1b.audiobook.features.widget.BaseWidgetProvider_MembersInjector;
import de.ph1b.audiobook.features.widget.TriggerWidgetOnChange;
import de.ph1b.audiobook.features.widget.TriggerWidgetOnChange_Factory;
import de.ph1b.audiobook.features.widget.WidgetUpdater;
import de.ph1b.audiobook.features.widget.WidgetUpdater_Factory;
import de.ph1b.audiobook.misc.DurationAnalyzer_Factory;
import de.ph1b.audiobook.misc.MediaAnalyzer_Factory;
import de.ph1b.audiobook.misc.MetaDataAnalyzer_Factory;
import de.ph1b.audiobook.persistence.pref.Pref;
import de.ph1b.audiobook.playback.AndroidAutoConnectedReceiver;
import de.ph1b.audiobook.playback.AndroidAutoConnectedReceiver_Factory;
import de.ph1b.audiobook.playback.MediaPlayer;
import de.ph1b.audiobook.playback.MediaPlayer_Factory;
import de.ph1b.audiobook.playback.MediaSessionCallback_Factory;
import de.ph1b.audiobook.playback.NotifyOnAutoConnectionChange;
import de.ph1b.audiobook.playback.NotifyOnAutoConnectionChange_Factory;
import de.ph1b.audiobook.playback.OnlyAudioRenderersFactory_Factory;
import de.ph1b.audiobook.playback.PlayStateManager;
import de.ph1b.audiobook.playback.PlayStateManager_Factory;
import de.ph1b.audiobook.playback.PlaybackService;
import de.ph1b.audiobook.playback.PlaybackService_MembersInjector;
import de.ph1b.audiobook.playback.PlayerController;
import de.ph1b.audiobook.playback.PlayerController_Factory;
import de.ph1b.audiobook.playback.ShakeDetector;
import de.ph1b.audiobook.playback.ShakeDetector_Factory;
import de.ph1b.audiobook.playback.SleepTimer;
import de.ph1b.audiobook.playback.SleepTimer_Factory;
import de.ph1b.audiobook.playback.utils.BookUriConverter;
import de.ph1b.audiobook.playback.utils.BookUriConverter_Factory;
import de.ph1b.audiobook.playback.utils.ChangeNotifier;
import de.ph1b.audiobook.playback.utils.ChangeNotifier_Factory;
import de.ph1b.audiobook.playback.utils.DataSourceConverter;
import de.ph1b.audiobook.playback.utils.DataSourceConverter_Factory;
import de.ph1b.audiobook.playback.utils.MediaBrowserHelper;
import de.ph1b.audiobook.playback.utils.MediaBrowserHelper_Factory;
import de.ph1b.audiobook.playback.utils.NotificationChannelCreator;
import de.ph1b.audiobook.playback.utils.NotificationChannelCreator_Factory;
import de.ph1b.audiobook.playback.utils.NotificationCreator;
import de.ph1b.audiobook.playback.utils.NotificationCreator_Factory;
import de.ph1b.audiobook.playback.utils.WakeLockManager_Factory;
import de.ph1b.audiobook.playback.utils.audioFocus.AudioFocusHandler;
import de.ph1b.audiobook.uitools.CoverFromDiscCollector;
import de.ph1b.audiobook.uitools.CoverFromDiscCollector_Factory;
import de.ph1b.audiobook.uitools.ImageHelper;
import de.ph1b.audiobook.uitools.ImageHelper_Factory;
import de.ph1b.audiobook.uitools.ThemeUtil;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private AndroidModule androidModule;

  private Application application;

  private Provider<Moshi> provideMoshiProvider;

  private Provider<Application> applicationProvider;

  private AndroidModule_ProvideContextFactory provideContextProvider;

  private PrefsModule_ProvideSharedPreferencesFactory provideSharedPreferencesProvider;

  private Provider<RxSharedPreferences> provideRxSharedPreferencesProvider;

  private Provider<Pref<UUID>> provideCurrentBookIdPreferenceProvider;

  private PersistenceModule_RoomDatabaseBuilderFactory roomDatabaseBuilderProvider;

  private PersistenceModule_MigrationsFactory migrationsProvider;

  private Provider<AppDb> appDbProvider;

  private PersistenceModule_ChapterDaoFactory chapterDaoProvider;

  private PersistenceModule_MetaDataDaoFactory metaDataDaoProvider;

  private PersistenceModule_BookSettingsDaoFactory bookSettingsDaoProvider;

  private BookStorage_Factory bookStorageProvider;

  private Provider<BookRepository> bookRepositoryProvider;

  private PersistenceModule_BookmarkDaoFactory bookmarkDaoProvider;

  private Provider<BookmarkRepo> bookmarkRepoProvider;

  private Provider<PlayStateManager> playStateManagerProvider;

  private Provider<PlayerController> playerControllerProvider;

  private Provider<Pref<Integer>> provideAutoRewindAmountPreferenceProvider;

  private Provider<Pref<Integer>> provideSeekTimePreferenceProvider;

  private Provider<Equalizer> equalizerProvider;

  private Provider<LoudnessGain> loudnessGainProvider;

  private Provider<PowerManager> providePowerManagerProvider;

  private WakeLockManager_Factory wakeLockManagerProvider;

  private Provider<DataSourceConverter> dataSourceConverterProvider;

  private OnlyAudioRenderersFactory_Factory onlyAudioRenderersFactoryProvider;

  private Provider<MediaPlayer> mediaPlayerProvider;

  private Provider<Pref<Boolean>> crashReportEnabledPrefProvider;

  private Provider<ActivityManager> provideActivityManagerProvider;

  private AndroidModule_ProvideWindowManagerFactory provideWindowManagerProvider;

  private Provider<ImageHelper> imageHelperProvider;

  private Provider<CoverFromDiscCollector> coverFromDiscCollectorProvider;

  private DurationAnalyzer_Factory durationAnalyzerProvider;

  private MediaAnalyzer_Factory mediaAnalyzerProvider;

  private Provider<ChapterReader> provideChapterReaderProvider;

  private Provider<Pref<Set<String>>> provideSingleBookFoldersPreferenceProvider;

  private Provider<Pref<Set<String>>> provideCollectionFoldersPreferenceProvider;

  private Provider<BookAdder> bookAdderProvider;

  private Provider<BindingModule_MainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<BindingModule_FolderChooserActivity.FolderChooserActivitySubcomponent.Builder>
      folderChooserActivitySubcomponentBuilderProvider;

  private Provider<BindingModule_BaseActivity.BaseActivitySubcomponent.Builder>
      baseActivitySubcomponentBuilderProvider;

  private Provider<BindingModule_PlaybackService.PlaybackServiceSubcomponent.Builder>
      playbackServiceSubcomponentBuilderProvider;

  private Provider<BindingModule_BaseWidgetProvider.BaseWidgetProviderSubcomponent.Builder>
      baseWidgetProviderSubcomponentBuilderProvider;

  private Provider<
          BindingModule_AutoRewindDialogFragment.AutoRewindDialogFragmentSubcomponent.Builder>
      autoRewindDialogFragmentSubcomponentBuilderProvider;

  private Provider<
          BindingModule_EditCoverDialogFragment.EditCoverDialogFragmentSubcomponent.Builder>
      editCoverDialogFragmentSubcomponentBuilderProvider;

  private Provider<
          BindingModule_EditBookTitleDialogFragment.EditBookTitleDialogFragmentSubcomponent.Builder>
      editBookTitleDialogFragmentSubcomponentBuilderProvider;

  private Provider<
          BindingModule_JumpToPositionDialogFragment.JumpToPositionDialogFragmentSubcomponent
              .Builder>
      jumpToPositionDialogFragmentSubcomponentBuilderProvider;

  private Provider<
          BindingModule_PlaybackSpeedDialogFragment.PlaybackSpeedDialogFragmentSubcomponent.Builder>
      playbackSpeedDialogFragmentSubcomponentBuilderProvider;

  private Provider<BindingModule_SeekDialogFragment.SeekDialogFragmentSubcomponent.Builder>
      seekDialogFragmentSubcomponentBuilderProvider;

  private Provider<
          BindingModule_SleepTimerDialogFragment.SleepTimerDialogFragmentSubcomponent.Builder>
      sleepTimerDialogFragmentSubcomponentBuilderProvider;

  private Provider<
          BindingModule_ThemePickerDialogFragment.ThemePickerDialogFragmentSubcomponent.Builder>
      themePickerDialogFragmentSubcomponentBuilderProvider;

  private Provider<BindingModule_EditBookBottomSheet.EditBookBottomSheetSubcomponent.Builder>
      editBookBottomSheetSubcomponentBuilderProvider;

  private Provider<WidgetUpdater> widgetUpdaterProvider;

  private Provider<TriggerWidgetOnChange> triggerWidgetOnChangeProvider;

  private Provider<AndroidAutoConnectedReceiver> androidAutoConnectedReceiverProvider;

  private Provider<Pref<ThemeUtil.Theme>> provideThemePreferenceProvider;

  private Provider<CoverColorExtractor> provideCoverColorExtractorProvider;

  private Provider<SensorManager> provideSensorManagerProvider;

  private Provider<ShakeDetector> shakeDetectorProvider;

  private Provider<Pref<Boolean>> provideShakeToResetPreferenceProvider;

  private Provider<Pref<Integer>> provideSleepTimePreferenceProvider;

  private Provider<SleepTimer> sleepTimerProvider;

  private Provider<StorageDirFinder> storageDirFinderProvider;

  private Provider<Pref<Boolean>> provideResumeOnReplugPreferenceProvider;

  private Provider<Pref<Boolean>> provideResumeAfterCallPreferenceProvider;

  private Provider<NotificationManager> provideNotificationManagerProvider;

  private Provider<NotificationChannelCreator> notificationChannelCreatorProvider;

  private Provider<AudioManager> provideAudioManagerProvider;

  private Provider<TelephonyManager> provideTelephonyManagerProvider;

  private Provider<Pref<Boolean>> provideBookmarkOnSleepTimerPreferenceProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(3)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(
            FolderChooserActivity.class,
            (Provider) folderChooserActivitySubcomponentBuilderProvider)
        .put(BaseActivity.class, (Provider) baseActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private Map<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
      getMapOfClassOfAndProviderOfFactoryOf2() {
    return Collections
        .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
            singletonMap(
                PlaybackService.class, (Provider) playbackServiceSubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf2());
  }

  private Map<
          Class<? extends BroadcastReceiver>,
          Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
      getMapOfClassOfAndProviderOfFactoryOf3() {
    return Collections
        .<Class<? extends BroadcastReceiver>,
            Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
            singletonMap(
                BaseWidgetProvider.class, (Provider) baseWidgetProviderSubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf3());
  }

  private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
      getMapOfClassOfAndProviderOfFactoryOf4() {
    return MapBuilder
        .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
            newMapBuilder(9)
        .put(
            AutoRewindDialogFragment.class,
            (Provider) autoRewindDialogFragmentSubcomponentBuilderProvider)
        .put(
            EditCoverDialogFragment.class,
            (Provider) editCoverDialogFragmentSubcomponentBuilderProvider)
        .put(
            EditBookTitleDialogFragment.class,
            (Provider) editBookTitleDialogFragmentSubcomponentBuilderProvider)
        .put(
            JumpToPositionDialogFragment.class,
            (Provider) jumpToPositionDialogFragmentSubcomponentBuilderProvider)
        .put(
            PlaybackSpeedDialogFragment.class,
            (Provider) playbackSpeedDialogFragmentSubcomponentBuilderProvider)
        .put(SeekDialogFragment.class, (Provider) seekDialogFragmentSubcomponentBuilderProvider)
        .put(
            SleepTimerDialogFragment.class,
            (Provider) sleepTimerDialogFragmentSubcomponentBuilderProvider)
        .put(
            ThemePickerDialogFragment.class,
            (Provider) themePickerDialogFragmentSubcomponentBuilderProvider)
        .put(EditBookBottomSheet.class, (Provider) editBookBottomSheetSubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf4());
  }

  private BookOverviewViewModel getBookOverviewViewModel() {
    return new BookOverviewViewModel(
        bookRepositoryProvider.get(),
        bookAdderProvider.get(),
        playStateManagerProvider.get(),
        playerControllerProvider.get(),
        coverFromDiscCollectorProvider.get(),
        provideCurrentBookIdPreferenceProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideMoshiProvider =
        DoubleCheck.provider(AndroidModule_ProvideMoshiFactory.create(builder.androidModule));
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideContextProvider =
        AndroidModule_ProvideContextFactory.create(builder.androidModule, applicationProvider);
    this.provideSharedPreferencesProvider =
        PrefsModule_ProvideSharedPreferencesFactory.create(
            builder.prefsModule, provideContextProvider);
    this.provideRxSharedPreferencesProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideRxSharedPreferencesFactory.create(
                builder.prefsModule, provideSharedPreferencesProvider));
    this.provideCurrentBookIdPreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideCurrentBookIdPreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.roomDatabaseBuilderProvider =
        PersistenceModule_RoomDatabaseBuilderFactory.create(
            builder.persistenceModule, provideContextProvider);
    this.migrationsProvider =
        PersistenceModule_MigrationsFactory.create(
            builder.persistenceModule, provideContextProvider);
    this.appDbProvider =
        DoubleCheck.provider(
            PersistenceModule_AppDbFactory.create(
                builder.persistenceModule, roomDatabaseBuilderProvider, migrationsProvider));
    this.chapterDaoProvider =
        PersistenceModule_ChapterDaoFactory.create(builder.persistenceModule, appDbProvider);
    this.metaDataDaoProvider =
        PersistenceModule_MetaDataDaoFactory.create(builder.persistenceModule, appDbProvider);
    this.bookSettingsDaoProvider =
        PersistenceModule_BookSettingsDaoFactory.create(builder.persistenceModule, appDbProvider);
    this.bookStorageProvider =
        BookStorage_Factory.create(
            chapterDaoProvider, metaDataDaoProvider, bookSettingsDaoProvider, appDbProvider);
    this.bookRepositoryProvider =
        DoubleCheck.provider(BookRepository_Factory.create(bookStorageProvider));
    this.bookmarkDaoProvider =
        PersistenceModule_BookmarkDaoFactory.create(builder.persistenceModule, appDbProvider);
    this.bookmarkRepoProvider =
        DoubleCheck.provider(BookmarkRepo_Factory.create(bookmarkDaoProvider));
    this.playStateManagerProvider = DoubleCheck.provider(PlayStateManager_Factory.create());
    this.playerControllerProvider =
        DoubleCheck.provider(PlayerController_Factory.create(provideContextProvider));
    this.androidModule = builder.androidModule;
    this.application = builder.application;
    this.provideAutoRewindAmountPreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideAutoRewindAmountPreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.provideSeekTimePreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideSeekTimePreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.equalizerProvider = DoubleCheck.provider(Equalizer_Factory.create(provideContextProvider));
    this.loudnessGainProvider = DoubleCheck.provider(LoudnessGain_Factory.create());
    this.providePowerManagerProvider =
        DoubleCheck.provider(
            AndroidModule_ProvidePowerManagerFactory.create(
                builder.androidModule, provideContextProvider));
    this.wakeLockManagerProvider = WakeLockManager_Factory.create(providePowerManagerProvider);
    this.dataSourceConverterProvider =
        SingleCheck.provider(DataSourceConverter_Factory.create(provideContextProvider));
    this.onlyAudioRenderersFactoryProvider =
        OnlyAudioRenderersFactory_Factory.create(provideContextProvider);
    this.mediaPlayerProvider =
        DoubleCheck.provider(
            MediaPlayer_Factory.create(
                playStateManagerProvider,
                provideAutoRewindAmountPreferenceProvider,
                provideSeekTimePreferenceProvider,
                equalizerProvider,
                loudnessGainProvider,
                wakeLockManagerProvider,
                dataSourceConverterProvider,
                onlyAudioRenderersFactoryProvider));
    this.crashReportEnabledPrefProvider =
        DoubleCheck.provider(
            PrefsModule_CrashReportEnabledPrefFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.provideActivityManagerProvider =
        DoubleCheck.provider(
            AndroidModule_ProvideActivityManagerFactory.create(
                builder.androidModule, provideContextProvider));
    this.provideWindowManagerProvider =
        AndroidModule_ProvideWindowManagerFactory.create(
            builder.androidModule, provideContextProvider);
    this.imageHelperProvider =
        DoubleCheck.provider(ImageHelper_Factory.create(provideWindowManagerProvider));
    this.coverFromDiscCollectorProvider =
        DoubleCheck.provider(
            CoverFromDiscCollector_Factory.create(
                provideActivityManagerProvider, imageHelperProvider));
    this.durationAnalyzerProvider =
        DurationAnalyzer_Factory.create(dataSourceConverterProvider, provideContextProvider);
    this.mediaAnalyzerProvider =
        MediaAnalyzer_Factory.create(durationAnalyzerProvider, MetaDataAnalyzer_Factory.create());
    this.provideChapterReaderProvider =
        DoubleCheck.provider(
            AndroidModule_ProvideChapterReaderFactory.create(builder.androidModule));
    this.provideSingleBookFoldersPreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideSingleBookFoldersPreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.provideCollectionFoldersPreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideCollectionFoldersPreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.bookAdderProvider =
        DoubleCheck.provider(
            BookAdder_Factory.create(
                provideContextProvider,
                bookRepositoryProvider,
                coverFromDiscCollectorProvider,
                mediaAnalyzerProvider,
                provideChapterReaderProvider,
                provideSingleBookFoldersPreferenceProvider,
                provideCollectionFoldersPreferenceProvider));
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<BindingModule_MainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public BindingModule_MainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.folderChooserActivitySubcomponentBuilderProvider =
        new Provider<
            BindingModule_FolderChooserActivity.FolderChooserActivitySubcomponent.Builder>() {
          @Override
          public BindingModule_FolderChooserActivity.FolderChooserActivitySubcomponent.Builder
              get() {
            return new FolderChooserActivitySubcomponentBuilder();
          }
        };
    this.baseActivitySubcomponentBuilderProvider =
        new Provider<BindingModule_BaseActivity.BaseActivitySubcomponent.Builder>() {
          @Override
          public BindingModule_BaseActivity.BaseActivitySubcomponent.Builder get() {
            return new BaseActivitySubcomponentBuilder();
          }
        };
    this.playbackServiceSubcomponentBuilderProvider =
        new Provider<BindingModule_PlaybackService.PlaybackServiceSubcomponent.Builder>() {
          @Override
          public BindingModule_PlaybackService.PlaybackServiceSubcomponent.Builder get() {
            return new PlaybackServiceSubcomponentBuilder();
          }
        };
    this.baseWidgetProviderSubcomponentBuilderProvider =
        new Provider<BindingModule_BaseWidgetProvider.BaseWidgetProviderSubcomponent.Builder>() {
          @Override
          public BindingModule_BaseWidgetProvider.BaseWidgetProviderSubcomponent.Builder get() {
            return new BaseWidgetProviderSubcomponentBuilder();
          }
        };
    this.autoRewindDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            BindingModule_AutoRewindDialogFragment.AutoRewindDialogFragmentSubcomponent.Builder>() {
          @Override
          public BindingModule_AutoRewindDialogFragment.AutoRewindDialogFragmentSubcomponent.Builder
              get() {
            return new AutoRewindDialogFragmentSubcomponentBuilder();
          }
        };
    this.editCoverDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            BindingModule_EditCoverDialogFragment.EditCoverDialogFragmentSubcomponent.Builder>() {
          @Override
          public BindingModule_EditCoverDialogFragment.EditCoverDialogFragmentSubcomponent.Builder
              get() {
            return new EditCoverDialogFragmentSubcomponentBuilder();
          }
        };
    this.editBookTitleDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            BindingModule_EditBookTitleDialogFragment.EditBookTitleDialogFragmentSubcomponent
                .Builder>() {
          @Override
          public BindingModule_EditBookTitleDialogFragment.EditBookTitleDialogFragmentSubcomponent
                  .Builder
              get() {
            return new EditBookTitleDialogFragmentSubcomponentBuilder();
          }
        };
    this.jumpToPositionDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            BindingModule_JumpToPositionDialogFragment.JumpToPositionDialogFragmentSubcomponent
                .Builder>() {
          @Override
          public BindingModule_JumpToPositionDialogFragment.JumpToPositionDialogFragmentSubcomponent
                  .Builder
              get() {
            return new JumpToPositionDialogFragmentSubcomponentBuilder();
          }
        };
    this.playbackSpeedDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            BindingModule_PlaybackSpeedDialogFragment.PlaybackSpeedDialogFragmentSubcomponent
                .Builder>() {
          @Override
          public BindingModule_PlaybackSpeedDialogFragment.PlaybackSpeedDialogFragmentSubcomponent
                  .Builder
              get() {
            return new PlaybackSpeedDialogFragmentSubcomponentBuilder();
          }
        };
    this.seekDialogFragmentSubcomponentBuilderProvider =
        new Provider<BindingModule_SeekDialogFragment.SeekDialogFragmentSubcomponent.Builder>() {
          @Override
          public BindingModule_SeekDialogFragment.SeekDialogFragmentSubcomponent.Builder get() {
            return new SeekDialogFragmentSubcomponentBuilder();
          }
        };
    this.sleepTimerDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            BindingModule_SleepTimerDialogFragment.SleepTimerDialogFragmentSubcomponent.Builder>() {
          @Override
          public BindingModule_SleepTimerDialogFragment.SleepTimerDialogFragmentSubcomponent.Builder
              get() {
            return new SleepTimerDialogFragmentSubcomponentBuilder();
          }
        };
    this.themePickerDialogFragmentSubcomponentBuilderProvider =
        new Provider<
            BindingModule_ThemePickerDialogFragment.ThemePickerDialogFragmentSubcomponent
                .Builder>() {
          @Override
          public BindingModule_ThemePickerDialogFragment.ThemePickerDialogFragmentSubcomponent
                  .Builder
              get() {
            return new ThemePickerDialogFragmentSubcomponentBuilder();
          }
        };
    this.editBookBottomSheetSubcomponentBuilderProvider =
        new Provider<BindingModule_EditBookBottomSheet.EditBookBottomSheetSubcomponent.Builder>() {
          @Override
          public BindingModule_EditBookBottomSheet.EditBookBottomSheetSubcomponent.Builder get() {
            return new EditBookBottomSheetSubcomponentBuilder();
          }
        };
    this.widgetUpdaterProvider =
        SingleCheck.provider(
            WidgetUpdater_Factory.create(
                provideContextProvider,
                bookRepositoryProvider,
                provideCurrentBookIdPreferenceProvider,
                imageHelperProvider,
                playerControllerProvider,
                playStateManagerProvider,
                provideWindowManagerProvider));
    this.triggerWidgetOnChangeProvider =
        SingleCheck.provider(
            TriggerWidgetOnChange_Factory.create(
                provideCurrentBookIdPreferenceProvider,
                bookRepositoryProvider,
                playStateManagerProvider,
                widgetUpdaterProvider));
    this.androidAutoConnectedReceiverProvider =
        DoubleCheck.provider(AndroidAutoConnectedReceiver_Factory.create());
    this.provideThemePreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideThemePreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.provideCoverColorExtractorProvider =
        DoubleCheck.provider(
            AndroidModule_ProvideCoverColorExtractorFactory.create(builder.androidModule));
    this.provideSensorManagerProvider =
        DoubleCheck.provider(
            AndroidModule_ProvideSensorManagerFactory.create(
                builder.androidModule, provideContextProvider));
    this.shakeDetectorProvider =
        SingleCheck.provider(ShakeDetector_Factory.create(provideSensorManagerProvider));
    this.provideShakeToResetPreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideShakeToResetPreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.provideSleepTimePreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideSleepTimePreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.sleepTimerProvider =
        DoubleCheck.provider(
            SleepTimer_Factory.create(
                playerControllerProvider,
                playStateManagerProvider,
                shakeDetectorProvider,
                provideShakeToResetPreferenceProvider,
                provideSleepTimePreferenceProvider));
    this.storageDirFinderProvider =
        DoubleCheck.provider(StorageDirFinder_Factory.create(provideContextProvider));
    this.provideResumeOnReplugPreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideResumeOnReplugPreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.provideResumeAfterCallPreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideResumeAfterCallPreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
    this.provideNotificationManagerProvider =
        DoubleCheck.provider(
            AndroidModule_ProvideNotificationManagerFactory.create(
                builder.androidModule, provideContextProvider));
    this.notificationChannelCreatorProvider =
        DoubleCheck.provider(
            NotificationChannelCreator_Factory.create(
                provideNotificationManagerProvider, provideContextProvider));
    this.provideAudioManagerProvider =
        DoubleCheck.provider(
            AndroidModule_ProvideAudioManagerFactory.create(
                builder.androidModule, provideContextProvider));
    this.provideTelephonyManagerProvider =
        DoubleCheck.provider(
            AndroidModule_ProvideTelephonyManagerFactory.create(
                builder.androidModule, provideContextProvider));
    this.provideBookmarkOnSleepTimerPreferenceProvider =
        DoubleCheck.provider(
            PrefsModule_ProvideBookmarkOnSleepTimerPreferenceFactory.create(
                builder.prefsModule, provideRxSharedPreferencesProvider));
  }

  @Override
  public void inject(Converters arg0) {
    injectConverters(arg0);
  }

  @Override
  public BookmarkPresenter getBookmarkPresenter() {
    return new BookmarkPresenter(
        provideCurrentBookIdPreferenceProvider.get(),
        bookRepositoryProvider.get(),
        bookmarkRepoProvider.get(),
        playStateManagerProvider.get(),
        playerControllerProvider.get());
  }

  @Override
  public Context getContext() {
    return AndroidModule_ProvideContextFactory.proxyProvideContext(androidModule, application);
  }

  @Override
  public MediaPlayer getPlayer() {
    return mediaPlayerProvider.get();
  }

  @Override
  public PlayStateManager getPlayStateManager() {
    return playStateManagerProvider.get();
  }

  @Override
  public Pref<Boolean> getAllowCrashReports() {
    return crashReportEnabledPrefProvider.get();
  }

  @Override
  public void inject(App target) {
    injectApp(target);
  }

  @Override
  public void inject(BookPlayController target) {
    injectBookPlayController(target);
  }

  @Override
  public void inject(LoadBookCover target) {
    injectLoadBookCover(target);
  }

  @Override
  public void inject(BookPlayPresenter target) {
    injectBookPlayPresenter(target);
  }

  @Override
  public void inject(BookOverviewController target) {
    injectBookOverviewController(target);
  }

  @Override
  public void inject(FolderChooserPresenter target) {
    injectFolderChooserPresenter(target);
  }

  @Override
  public void inject(FolderOverviewPresenter target) {
    injectFolderOverviewPresenter(target);
  }

  @Override
  public void inject(ImagePickerController target) {
    injectImagePickerController(target);
  }

  @Override
  public void inject(LoudnessDialog target) {
    injectLoudnessDialog(target);
  }

  @Override
  public void inject(SettingsController target) {
    injectSettingsController(target);
  }

  private Converters injectConverters(Converters instance) {
    Converters_MembersInjector.injectMoshi(instance, provideMoshiProvider.get());
    return instance;
  }

  private App injectApp(App instance) {
    App_MembersInjector.injectBookAdder(instance, bookAdderProvider.get());
    App_MembersInjector.injectActivityInjector(instance, getDispatchingAndroidInjectorOfActivity());
    App_MembersInjector.injectServiceInjector(instance, getDispatchingAndroidInjectorOfService());
    App_MembersInjector.injectBroadcastInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    App_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    App_MembersInjector.injectTriggerWidgetOnChange(instance, triggerWidgetOnChangeProvider.get());
    App_MembersInjector.injectAutoConnectedReceiver(
        instance, androidAutoConnectedReceiverProvider.get());
    App_MembersInjector.injectThemePref(instance, provideThemePreferenceProvider.get());
    return instance;
  }

  private BookPlayController injectBookPlayController(BookPlayController instance) {
    BookPlayController_MembersInjector.injectEqualizer(instance, equalizerProvider.get());
    return instance;
  }

  private LoadBookCover injectLoadBookCover(LoadBookCover instance) {
    LoadBookCover_MembersInjector.injectCoverColorExtractor(
        instance, provideCoverColorExtractorProvider.get());
    return instance;
  }

  private BookPlayPresenter injectBookPlayPresenter(BookPlayPresenter instance) {
    BookPlayPresenter_MembersInjector.injectBookRepository(instance, bookRepositoryProvider.get());
    BookPlayPresenter_MembersInjector.injectPlayerController(
        instance, playerControllerProvider.get());
    BookPlayPresenter_MembersInjector.injectPlayStateManager(
        instance, playStateManagerProvider.get());
    BookPlayPresenter_MembersInjector.injectSleepTimer(instance, sleepTimerProvider.get());
    BookPlayPresenter_MembersInjector.injectBookmarkRepo(instance, bookmarkRepoProvider.get());
    return instance;
  }

  private BookOverviewController injectBookOverviewController(BookOverviewController instance) {
    BookOverviewController_MembersInjector.injectCurrentBookIdPref(
        instance, provideCurrentBookIdPreferenceProvider.get());
    BookOverviewController_MembersInjector.injectViewModel(instance, getBookOverviewViewModel());
    return instance;
  }

  private FolderChooserPresenter injectFolderChooserPresenter(FolderChooserPresenter instance) {
    FolderChooserPresenter_MembersInjector.injectSingleBookFolderPref(
        instance, provideSingleBookFoldersPreferenceProvider.get());
    FolderChooserPresenter_MembersInjector.injectCollectionBookFolderPref(
        instance, provideCollectionFoldersPreferenceProvider.get());
    FolderChooserPresenter_MembersInjector.injectStorageDirFinder(
        instance, storageDirFinderProvider.get());
    return instance;
  }

  private FolderOverviewPresenter injectFolderOverviewPresenter(FolderOverviewPresenter instance) {
    FolderOverviewPresenter_MembersInjector.injectSingleBookFolderPref(
        instance, provideSingleBookFoldersPreferenceProvider.get());
    FolderOverviewPresenter_MembersInjector.injectCollectionBookFolderPref(
        instance, provideCollectionFoldersPreferenceProvider.get());
    return instance;
  }

  private ImagePickerController injectImagePickerController(ImagePickerController instance) {
    ImagePickerController_MembersInjector.injectRepo(instance, bookRepositoryProvider.get());
    ImagePickerController_MembersInjector.injectImageHelper(instance, imageHelperProvider.get());
    return instance;
  }

  private LoudnessDialog injectLoudnessDialog(LoudnessDialog instance) {
    LoudnessDialog_MembersInjector.injectRepo(instance, bookRepositoryProvider.get());
    LoudnessDialog_MembersInjector.injectPlayer(instance, playerControllerProvider.get());
    return instance;
  }

  private SettingsController injectSettingsController(SettingsController instance) {
    SettingsController_MembersInjector.injectThemePref(
        instance, provideThemePreferenceProvider.get());
    SettingsController_MembersInjector.injectResumeOnReplugPref(
        instance, provideResumeOnReplugPreferenceProvider.get());
    SettingsController_MembersInjector.injectResumeAfterCallPref(
        instance, provideResumeAfterCallPreferenceProvider.get());
    SettingsController_MembersInjector.injectAutoRewindAmountPref(
        instance, provideAutoRewindAmountPreferenceProvider.get());
    SettingsController_MembersInjector.injectSeekTimePref(
        instance, provideSeekTimePreferenceProvider.get());
    SettingsController_MembersInjector.injectCrashReportEnabledPref(
        instance, crashReportEnabledPrefProvider.get());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AndroidModule androidModule;

    private PrefsModule prefsModule;

    private PersistenceModule persistenceModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (androidModule == null) {
        this.androidModule = new AndroidModule();
      }
      if (prefsModule == null) {
        this.prefsModule = new PrefsModule();
      }
      if (persistenceModule == null) {
        this.persistenceModule = new PersistenceModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends BindingModule_MainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public BindingModule_MainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements BindingModule_MainActivity.MainActivitySubcomponent {
    private Provider<BookSearchParser> bookSearchParserProvider;

    private Provider<BookSearchHandler> bookSearchHandlerProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.bookSearchParserProvider = SingleCheck.provider(BookSearchParser_Factory.create());
      this.bookSearchHandlerProvider =
          SingleCheck.provider(
              BookSearchHandler_Factory.create(
                  DaggerAppComponent.this.bookRepositoryProvider,
                  DaggerAppComponent.this.playerControllerProvider,
                  DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectCurrentBookIdPref(
          instance, DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider.get());
      MainActivity_MembersInjector.injectSingleBookFolderPref(
          instance, DaggerAppComponent.this.provideSingleBookFoldersPreferenceProvider.get());
      MainActivity_MembersInjector.injectCollectionBookFolderPref(
          instance, DaggerAppComponent.this.provideCollectionFoldersPreferenceProvider.get());
      MainActivity_MembersInjector.injectPlayerController(
          instance, DaggerAppComponent.this.playerControllerProvider.get());
      MainActivity_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.bookRepositoryProvider.get());
      MainActivity_MembersInjector.injectBookSearchParser(instance, bookSearchParserProvider.get());
      MainActivity_MembersInjector.injectBookSearchHandler(
          instance, bookSearchHandlerProvider.get());
      return instance;
    }
  }

  private final class FolderChooserActivitySubcomponentBuilder
      extends BindingModule_FolderChooserActivity.FolderChooserActivitySubcomponent.Builder {
    private FolderChooserActivity seedInstance;

    @Override
    public BindingModule_FolderChooserActivity.FolderChooserActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            FolderChooserActivity.class.getCanonicalName() + " must be set");
      }
      return new FolderChooserActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(FolderChooserActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class FolderChooserActivitySubcomponentImpl
      implements BindingModule_FolderChooserActivity.FolderChooserActivitySubcomponent {
    private FolderChooserActivitySubcomponentImpl(
        FolderChooserActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(FolderChooserActivity arg0) {}
  }

  private final class BaseActivitySubcomponentBuilder
      extends BindingModule_BaseActivity.BaseActivitySubcomponent.Builder {
    private BaseActivity seedInstance;

    @Override
    public BindingModule_BaseActivity.BaseActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(BaseActivity.class.getCanonicalName() + " must be set");
      }
      return new BaseActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(BaseActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class BaseActivitySubcomponentImpl
      implements BindingModule_BaseActivity.BaseActivitySubcomponent {
    private BaseActivitySubcomponentImpl(BaseActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(BaseActivity arg0) {}
  }

  private final class PlaybackServiceSubcomponentBuilder
      extends BindingModule_PlaybackService.PlaybackServiceSubcomponent.Builder {
    private PlaybackModule playbackModule;

    private PlaybackService seedInstance;

    @Override
    public BindingModule_PlaybackService.PlaybackServiceSubcomponent build() {
      if (playbackModule == null) {
        this.playbackModule = new PlaybackModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(PlaybackService.class.getCanonicalName() + " must be set");
      }
      return new PlaybackServiceSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PlaybackService arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PlaybackServiceSubcomponentImpl
      implements BindingModule_PlaybackService.PlaybackServiceSubcomponent {
    private Provider<PlaybackService> seedInstanceProvider;

    private Provider<BookSearchHandler> bookSearchHandlerProvider;

    private Provider<BookSearchParser> bookSearchParserProvider;

    private MediaSessionCallback_Factory mediaSessionCallbackProvider;

    private PlaybackModule_ProvideMediaButtonReceiverComponentNameFactory
        provideMediaButtonReceiverComponentNameProvider;

    private Provider<PendingIntent> provideButtonRecieverPendingIntentProvider;

    private Provider<MediaSessionCompat> provideMediaSessionProvider;

    private Provider<NotificationCreator> notificationCreatorProvider;

    private Provider<MediaBrowserHelper> mediaBrowserHelperProvider;

    private Provider<ChangeNotifier> changeNotifierProvider;

    private Provider<NotifyOnAutoConnectionChange> notifyOnAutoConnectionChangeProvider;

    private PlaybackServiceSubcomponentImpl(PlaybackServiceSubcomponentBuilder builder) {
      initialize(builder);
    }

    private AudioFocusHandler getAudioFocusHandler() {
      return new AudioFocusHandler(
          DaggerAppComponent.this.provideAudioManagerProvider.get(),
          DaggerAppComponent.this.provideTelephonyManagerProvider.get(),
          DaggerAppComponent.this.mediaPlayerProvider.get(),
          DaggerAppComponent.this.playStateManagerProvider.get(),
          DaggerAppComponent.this.provideResumeAfterCallPreferenceProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PlaybackServiceSubcomponentBuilder builder) {
      this.seedInstanceProvider = InstanceFactory.create(builder.seedInstance);
      this.bookSearchHandlerProvider =
          SingleCheck.provider(
              BookSearchHandler_Factory.create(
                  DaggerAppComponent.this.bookRepositoryProvider,
                  DaggerAppComponent.this.playerControllerProvider,
                  DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider));
      this.bookSearchParserProvider = SingleCheck.provider(BookSearchParser_Factory.create());
      this.mediaSessionCallbackProvider =
          MediaSessionCallback_Factory.create(
              BookUriConverter_Factory.create(),
              DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider,
              bookSearchHandlerProvider,
              DaggerAppComponent.this.androidAutoConnectedReceiverProvider,
              DaggerAppComponent.this.mediaPlayerProvider,
              bookSearchParserProvider);
      this.provideMediaButtonReceiverComponentNameProvider =
          PlaybackModule_ProvideMediaButtonReceiverComponentNameFactory.create(
              builder.playbackModule, seedInstanceProvider);
      this.provideButtonRecieverPendingIntentProvider =
          DoubleCheck.provider(
              PlaybackModule_ProvideButtonRecieverPendingIntentFactory.create(
                  builder.playbackModule,
                  seedInstanceProvider,
                  provideMediaButtonReceiverComponentNameProvider));
      this.provideMediaSessionProvider =
          DoubleCheck.provider(
              PlaybackModule_ProvideMediaSessionFactory.create(
                  builder.playbackModule,
                  seedInstanceProvider,
                  mediaSessionCallbackProvider,
                  provideMediaButtonReceiverComponentNameProvider,
                  provideButtonRecieverPendingIntentProvider));
      this.notificationCreatorProvider =
          DoubleCheck.provider(
              NotificationCreator_Factory.create(
                  DaggerAppComponent.this.provideContextProvider,
                  DaggerAppComponent.this.imageHelperProvider,
                  DaggerAppComponent.this.playerControllerProvider,
                  DaggerAppComponent.this.playStateManagerProvider,
                  provideMediaSessionProvider,
                  DaggerAppComponent.this.notificationChannelCreatorProvider));
      this.mediaBrowserHelperProvider =
          SingleCheck.provider(
              MediaBrowserHelper_Factory.create(
                  BookUriConverter_Factory.create(),
                  DaggerAppComponent.this.bookRepositoryProvider,
                  DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider,
                  DaggerAppComponent.this.provideContextProvider));
      this.changeNotifierProvider =
          DoubleCheck.provider(
              ChangeNotifier_Factory.create(
                  BookUriConverter_Factory.create(),
                  provideMediaSessionProvider,
                  DaggerAppComponent.this.imageHelperProvider,
                  DaggerAppComponent.this.provideContextProvider,
                  DaggerAppComponent.this.playStateManagerProvider));
      this.notifyOnAutoConnectionChangeProvider =
          DoubleCheck.provider(
              NotifyOnAutoConnectionChange_Factory.create(
                  changeNotifierProvider,
                  DaggerAppComponent.this.bookRepositoryProvider,
                  DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider,
                  DaggerAppComponent.this.androidAutoConnectedReceiverProvider));
    }

    @Override
    public void inject(PlaybackService arg0) {
      injectPlaybackService(arg0);
    }

    private PlaybackService injectPlaybackService(PlaybackService instance) {
      PlaybackService_MembersInjector.injectCurrentBookIdPref(
          instance, DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider.get());
      PlaybackService_MembersInjector.injectPlayer(
          instance, DaggerAppComponent.this.mediaPlayerProvider.get());
      PlaybackService_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.bookRepositoryProvider.get());
      PlaybackService_MembersInjector.injectNotificationManager(
          instance, DaggerAppComponent.this.provideNotificationManagerProvider.get());
      PlaybackService_MembersInjector.injectNotificationCreator(
          instance, notificationCreatorProvider.get());
      PlaybackService_MembersInjector.injectPlayStateManager(
          instance, DaggerAppComponent.this.playStateManagerProvider.get());
      PlaybackService_MembersInjector.injectBookUriConverter(instance, new BookUriConverter());
      PlaybackService_MembersInjector.injectMediaBrowserHelper(
          instance, mediaBrowserHelperProvider.get());
      PlaybackService_MembersInjector.injectMediaSession(
          instance, provideMediaSessionProvider.get());
      PlaybackService_MembersInjector.injectChangeNotifier(instance, changeNotifierProvider.get());
      PlaybackService_MembersInjector.injectAutoConnected(
          instance, DaggerAppComponent.this.androidAutoConnectedReceiverProvider.get());
      PlaybackService_MembersInjector.injectNotifyOnAutoConnectionChange(
          instance, notifyOnAutoConnectionChangeProvider.get());
      PlaybackService_MembersInjector.injectAudioFocusHelper(instance, getAudioFocusHandler());
      PlaybackService_MembersInjector.injectResumeOnReplugPref(
          instance, DaggerAppComponent.this.provideResumeOnReplugPreferenceProvider.get());
      return instance;
    }
  }

  private final class BaseWidgetProviderSubcomponentBuilder
      extends BindingModule_BaseWidgetProvider.BaseWidgetProviderSubcomponent.Builder {
    private BaseWidgetProvider seedInstance;

    @Override
    public BindingModule_BaseWidgetProvider.BaseWidgetProviderSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            BaseWidgetProvider.class.getCanonicalName() + " must be set");
      }
      return new BaseWidgetProviderSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(BaseWidgetProvider arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class BaseWidgetProviderSubcomponentImpl
      implements BindingModule_BaseWidgetProvider.BaseWidgetProviderSubcomponent {
    private BaseWidgetProviderSubcomponentImpl(BaseWidgetProviderSubcomponentBuilder builder) {}

    @Override
    public void inject(BaseWidgetProvider arg0) {
      injectBaseWidgetProvider(arg0);
    }

    private BaseWidgetProvider injectBaseWidgetProvider(BaseWidgetProvider instance) {
      BaseWidgetProvider_MembersInjector.injectWidgetUpdater(
          instance, DaggerAppComponent.this.widgetUpdaterProvider.get());
      return instance;
    }
  }

  private final class AutoRewindDialogFragmentSubcomponentBuilder
      extends BindingModule_AutoRewindDialogFragment.AutoRewindDialogFragmentSubcomponent.Builder {
    private AutoRewindDialogFragment seedInstance;

    @Override
    public BindingModule_AutoRewindDialogFragment.AutoRewindDialogFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            AutoRewindDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new AutoRewindDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(AutoRewindDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class AutoRewindDialogFragmentSubcomponentImpl
      implements BindingModule_AutoRewindDialogFragment.AutoRewindDialogFragmentSubcomponent {
    private AutoRewindDialogFragmentSubcomponentImpl(
        AutoRewindDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(AutoRewindDialogFragment arg0) {
      injectAutoRewindDialogFragment(arg0);
    }

    private AutoRewindDialogFragment injectAutoRewindDialogFragment(
        AutoRewindDialogFragment instance) {
      AutoRewindDialogFragment_MembersInjector.injectAutoRewindAmountPref(
          instance, DaggerAppComponent.this.provideAutoRewindAmountPreferenceProvider.get());
      return instance;
    }
  }

  private final class EditCoverDialogFragmentSubcomponentBuilder
      extends BindingModule_EditCoverDialogFragment.EditCoverDialogFragmentSubcomponent.Builder {
    private EditCoverDialogFragment seedInstance;

    @Override
    public BindingModule_EditCoverDialogFragment.EditCoverDialogFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            EditCoverDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new EditCoverDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(EditCoverDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class EditCoverDialogFragmentSubcomponentImpl
      implements BindingModule_EditCoverDialogFragment.EditCoverDialogFragmentSubcomponent {
    private EditCoverDialogFragmentSubcomponentImpl(
        EditCoverDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(EditCoverDialogFragment arg0) {
      injectEditCoverDialogFragment(arg0);
    }

    private EditCoverDialogFragment injectEditCoverDialogFragment(
        EditCoverDialogFragment instance) {
      EditCoverDialogFragment_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.bookRepositoryProvider.get());
      EditCoverDialogFragment_MembersInjector.injectImageHelper(
          instance, DaggerAppComponent.this.imageHelperProvider.get());
      return instance;
    }
  }

  private final class EditBookTitleDialogFragmentSubcomponentBuilder
      extends BindingModule_EditBookTitleDialogFragment.EditBookTitleDialogFragmentSubcomponent
          .Builder {
    private EditBookTitleDialogFragment seedInstance;

    @Override
    public BindingModule_EditBookTitleDialogFragment.EditBookTitleDialogFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            EditBookTitleDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new EditBookTitleDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(EditBookTitleDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class EditBookTitleDialogFragmentSubcomponentImpl
      implements BindingModule_EditBookTitleDialogFragment.EditBookTitleDialogFragmentSubcomponent {
    private EditBookTitleDialogFragmentSubcomponentImpl(
        EditBookTitleDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(EditBookTitleDialogFragment arg0) {
      injectEditBookTitleDialogFragment(arg0);
    }

    private EditBookTitleDialogFragment injectEditBookTitleDialogFragment(
        EditBookTitleDialogFragment instance) {
      EditBookTitleDialogFragment_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.bookRepositoryProvider.get());
      return instance;
    }
  }

  private final class JumpToPositionDialogFragmentSubcomponentBuilder
      extends BindingModule_JumpToPositionDialogFragment.JumpToPositionDialogFragmentSubcomponent
          .Builder {
    private JumpToPositionDialogFragment seedInstance;

    @Override
    public BindingModule_JumpToPositionDialogFragment.JumpToPositionDialogFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            JumpToPositionDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new JumpToPositionDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(JumpToPositionDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class JumpToPositionDialogFragmentSubcomponentImpl
      implements BindingModule_JumpToPositionDialogFragment
          .JumpToPositionDialogFragmentSubcomponent {
    private JumpToPositionDialogFragmentSubcomponentImpl(
        JumpToPositionDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(JumpToPositionDialogFragment arg0) {
      injectJumpToPositionDialogFragment(arg0);
    }

    private JumpToPositionDialogFragment injectJumpToPositionDialogFragment(
        JumpToPositionDialogFragment instance) {
      JumpToPositionDialogFragment_MembersInjector.injectCurrentBookIdPref(
          instance, DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider.get());
      JumpToPositionDialogFragment_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.bookRepositoryProvider.get());
      JumpToPositionDialogFragment_MembersInjector.injectPlayerController(
          instance, DaggerAppComponent.this.playerControllerProvider.get());
      return instance;
    }
  }

  private final class PlaybackSpeedDialogFragmentSubcomponentBuilder
      extends BindingModule_PlaybackSpeedDialogFragment.PlaybackSpeedDialogFragmentSubcomponent
          .Builder {
    private PlaybackSpeedDialogFragment seedInstance;

    @Override
    public BindingModule_PlaybackSpeedDialogFragment.PlaybackSpeedDialogFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            PlaybackSpeedDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new PlaybackSpeedDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PlaybackSpeedDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PlaybackSpeedDialogFragmentSubcomponentImpl
      implements BindingModule_PlaybackSpeedDialogFragment.PlaybackSpeedDialogFragmentSubcomponent {
    private PlaybackSpeedDialogFragmentSubcomponentImpl(
        PlaybackSpeedDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(PlaybackSpeedDialogFragment arg0) {
      injectPlaybackSpeedDialogFragment(arg0);
    }

    private PlaybackSpeedDialogFragment injectPlaybackSpeedDialogFragment(
        PlaybackSpeedDialogFragment instance) {
      PlaybackSpeedDialogFragment_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.bookRepositoryProvider.get());
      PlaybackSpeedDialogFragment_MembersInjector.injectCurrentBookIdPref(
          instance, DaggerAppComponent.this.provideCurrentBookIdPreferenceProvider.get());
      PlaybackSpeedDialogFragment_MembersInjector.injectPlayerController(
          instance, DaggerAppComponent.this.playerControllerProvider.get());
      return instance;
    }
  }

  private final class SeekDialogFragmentSubcomponentBuilder
      extends BindingModule_SeekDialogFragment.SeekDialogFragmentSubcomponent.Builder {
    private SeekDialogFragment seedInstance;

    @Override
    public BindingModule_SeekDialogFragment.SeekDialogFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            SeekDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new SeekDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SeekDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SeekDialogFragmentSubcomponentImpl
      implements BindingModule_SeekDialogFragment.SeekDialogFragmentSubcomponent {
    private SeekDialogFragmentSubcomponentImpl(SeekDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(SeekDialogFragment arg0) {
      injectSeekDialogFragment(arg0);
    }

    private SeekDialogFragment injectSeekDialogFragment(SeekDialogFragment instance) {
      SeekDialogFragment_MembersInjector.injectSeekTimePref(
          instance, DaggerAppComponent.this.provideSeekTimePreferenceProvider.get());
      return instance;
    }
  }

  private final class SleepTimerDialogFragmentSubcomponentBuilder
      extends BindingModule_SleepTimerDialogFragment.SleepTimerDialogFragmentSubcomponent.Builder {
    private SleepTimerDialogFragment seedInstance;

    @Override
    public BindingModule_SleepTimerDialogFragment.SleepTimerDialogFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            SleepTimerDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new SleepTimerDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SleepTimerDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SleepTimerDialogFragmentSubcomponentImpl
      implements BindingModule_SleepTimerDialogFragment.SleepTimerDialogFragmentSubcomponent {
    private SleepTimerDialogFragmentSubcomponentImpl(
        SleepTimerDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(SleepTimerDialogFragment arg0) {
      injectSleepTimerDialogFragment(arg0);
    }

    private SleepTimerDialogFragment injectSleepTimerDialogFragment(
        SleepTimerDialogFragment instance) {
      SleepTimerDialogFragment_MembersInjector.injectBookmarkRepo(
          instance, DaggerAppComponent.this.bookmarkRepoProvider.get());
      SleepTimerDialogFragment_MembersInjector.injectSleepTimer(
          instance, DaggerAppComponent.this.sleepTimerProvider.get());
      SleepTimerDialogFragment_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.bookRepositoryProvider.get());
      SleepTimerDialogFragment_MembersInjector.injectShakeDetector(
          instance, DaggerAppComponent.this.shakeDetectorProvider.get());
      SleepTimerDialogFragment_MembersInjector.injectShakeToResetPref(
          instance, DaggerAppComponent.this.provideShakeToResetPreferenceProvider.get());
      SleepTimerDialogFragment_MembersInjector.injectBookmarkOnSleepTimerPref(
          instance, DaggerAppComponent.this.provideBookmarkOnSleepTimerPreferenceProvider.get());
      SleepTimerDialogFragment_MembersInjector.injectSleepTimePref(
          instance, DaggerAppComponent.this.provideSleepTimePreferenceProvider.get());
      return instance;
    }
  }

  private final class ThemePickerDialogFragmentSubcomponentBuilder
      extends BindingModule_ThemePickerDialogFragment.ThemePickerDialogFragmentSubcomponent
          .Builder {
    private ThemePickerDialogFragment seedInstance;

    @Override
    public BindingModule_ThemePickerDialogFragment.ThemePickerDialogFragmentSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            ThemePickerDialogFragment.class.getCanonicalName() + " must be set");
      }
      return new ThemePickerDialogFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ThemePickerDialogFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ThemePickerDialogFragmentSubcomponentImpl
      implements BindingModule_ThemePickerDialogFragment.ThemePickerDialogFragmentSubcomponent {
    private ThemePickerDialogFragmentSubcomponentImpl(
        ThemePickerDialogFragmentSubcomponentBuilder builder) {}

    @Override
    public void inject(ThemePickerDialogFragment arg0) {
      injectThemePickerDialogFragment(arg0);
    }

    private ThemePickerDialogFragment injectThemePickerDialogFragment(
        ThemePickerDialogFragment instance) {
      ThemePickerDialogFragment_MembersInjector.injectThemePref(
          instance, DaggerAppComponent.this.provideThemePreferenceProvider.get());
      return instance;
    }
  }

  private final class EditBookBottomSheetSubcomponentBuilder
      extends BindingModule_EditBookBottomSheet.EditBookBottomSheetSubcomponent.Builder {
    private EditBookBottomSheet seedInstance;

    @Override
    public BindingModule_EditBookBottomSheet.EditBookBottomSheetSubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            EditBookBottomSheet.class.getCanonicalName() + " must be set");
      }
      return new EditBookBottomSheetSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(EditBookBottomSheet arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class EditBookBottomSheetSubcomponentImpl
      implements BindingModule_EditBookBottomSheet.EditBookBottomSheetSubcomponent {
    private EditBookBottomSheetSubcomponentImpl(EditBookBottomSheetSubcomponentBuilder builder) {}

    @Override
    public void inject(EditBookBottomSheet arg0) {
      injectEditBookBottomSheet(arg0);
    }

    private EditBookBottomSheet injectEditBookBottomSheet(EditBookBottomSheet instance) {
      EditBookBottomSheet_MembersInjector.injectRepo(
          instance, DaggerAppComponent.this.bookRepositoryProvider.get());
      return instance;
    }
  }
}
