// Generated by Dagger (https://google.github.io/dagger).
package de.ph1b.audiobook.playback.utils;

import android.content.Context;
import android.support.v4.media.session.MediaSessionCompat;
import dagger.internal.Factory;
import de.ph1b.audiobook.playback.PlayStateManager;
import de.ph1b.audiobook.playback.PlayerController;
import de.ph1b.audiobook.uitools.ImageHelper;
import javax.inject.Provider;

public final class NotificationCreator_Factory implements Factory<NotificationCreator> {
  private final Provider<Context> contextProvider;

  private final Provider<ImageHelper> imageHelperProvider;

  private final Provider<PlayerController> playerControllerProvider;

  private final Provider<PlayStateManager> playStateManagerProvider;

  private final Provider<MediaSessionCompat> mediaSessionProvider;

  private final Provider<NotificationChannelCreator> notificationChannelCreatorProvider;

  public NotificationCreator_Factory(
      Provider<Context> contextProvider,
      Provider<ImageHelper> imageHelperProvider,
      Provider<PlayerController> playerControllerProvider,
      Provider<PlayStateManager> playStateManagerProvider,
      Provider<MediaSessionCompat> mediaSessionProvider,
      Provider<NotificationChannelCreator> notificationChannelCreatorProvider) {
    this.contextProvider = contextProvider;
    this.imageHelperProvider = imageHelperProvider;
    this.playerControllerProvider = playerControllerProvider;
    this.playStateManagerProvider = playStateManagerProvider;
    this.mediaSessionProvider = mediaSessionProvider;
    this.notificationChannelCreatorProvider = notificationChannelCreatorProvider;
  }

  @Override
  public NotificationCreator get() {
    return provideInstance(
        contextProvider,
        imageHelperProvider,
        playerControllerProvider,
        playStateManagerProvider,
        mediaSessionProvider,
        notificationChannelCreatorProvider);
  }

  public static NotificationCreator provideInstance(
      Provider<Context> contextProvider,
      Provider<ImageHelper> imageHelperProvider,
      Provider<PlayerController> playerControllerProvider,
      Provider<PlayStateManager> playStateManagerProvider,
      Provider<MediaSessionCompat> mediaSessionProvider,
      Provider<NotificationChannelCreator> notificationChannelCreatorProvider) {
    return new NotificationCreator(
        contextProvider.get(),
        imageHelperProvider.get(),
        playerControllerProvider.get(),
        playStateManagerProvider.get(),
        mediaSessionProvider.get(),
        notificationChannelCreatorProvider.get());
  }

  public static NotificationCreator_Factory create(
      Provider<Context> contextProvider,
      Provider<ImageHelper> imageHelperProvider,
      Provider<PlayerController> playerControllerProvider,
      Provider<PlayStateManager> playStateManagerProvider,
      Provider<MediaSessionCompat> mediaSessionProvider,
      Provider<NotificationChannelCreator> notificationChannelCreatorProvider) {
    return new NotificationCreator_Factory(
        contextProvider,
        imageHelperProvider,
        playerControllerProvider,
        playStateManagerProvider,
        mediaSessionProvider,
        notificationChannelCreatorProvider);
  }

  public static NotificationCreator newNotificationCreator(
      Context context,
      ImageHelper imageHelper,
      PlayerController playerController,
      PlayStateManager playStateManager,
      MediaSessionCompat mediaSession,
      NotificationChannelCreator notificationChannelCreator) {
    return new NotificationCreator(
        context,
        imageHelper,
        playerController,
        playStateManager,
        mediaSession,
        notificationChannelCreator);
  }
}
